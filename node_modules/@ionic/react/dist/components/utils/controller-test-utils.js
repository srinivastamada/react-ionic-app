var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { cleanup } from 'react-testing-library';
export function createControllerUtils(tagName) {
    const elementTag = tagName;
    const controllerTag = `${tagName}-controller`;
    function cleanupAfterController() {
        const controller = document.querySelector(controllerTag);
        if (controller) {
            controller.remove();
        }
        const element = document.querySelector(elementTag);
        if (element) {
            element.remove();
        }
        cleanup();
    }
    function createControllerElement() {
        const element = document.createElement(elementTag);
        const presentFunction = jest.fn(() => {
            element.setAttribute('active', 'true');
            return Promise.resolve(true);
        });
        const dismissFunction = jest.fn(() => {
            element.remove();
            Promise.resolve(true);
        });
        element.present = presentFunction;
        element.dismiss = dismissFunction;
        return [element, presentFunction, dismissFunction];
    }
    function augmentController(baseElement, container, childElement) {
        const controller = baseElement.querySelector(controllerTag);
        controller.componentOnReady = jest.fn(() => __awaiter(this, void 0, void 0, function* () {
            return true;
        }));
        controller.create = jest.fn(() => __awaiter(this, void 0, void 0, function* () {
            container.append(childElement);
            return childElement;
        }));
        return controller;
    }
    return {
        cleanupAfterController,
        createControllerElement,
        augmentController
    };
}
//# sourceMappingURL=controller-test-utils.js.map