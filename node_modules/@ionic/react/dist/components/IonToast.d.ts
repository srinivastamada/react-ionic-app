/// <reference types="react" />
import { Components } from '@ionic/core';
export declare type ToastOptions = Components.IonToastAttributes;
declare const IonToast: {
    new (props: Components.IonToastAttributes & {
        isOpen: boolean;
        onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
    }): {
        element: HTMLIonToastElement;
        controllerElement: HTMLIonToastControllerElement;
        id: string;
        componentDidMount(): void;
        componentDidUpdate(prevProps: Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }): Promise<void>;
        render(): null;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callBack?: () => void): void;
        readonly props: Readonly<{
            children?: import("react").ReactNode;
        }> & Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Components.IonToastAttributes & {
            isOpen: boolean;
            onDidDismiss: (event: CustomEvent<import("@ionic/core").OverlayEventDetail<any>>) => void;
        }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    readonly displayName: string;
    contextType?: import("react").Context<any>;
};
export default IonToast;
