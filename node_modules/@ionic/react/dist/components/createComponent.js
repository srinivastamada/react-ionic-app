var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import React from 'react';
import ReactDOM from 'react-dom';
import { dashToPascalCase, attachEventProps } from './utils';
export function createReactComponent(tagName) {
    const displayName = dashToPascalCase(tagName);
    class ReactComponent extends React.Component {
        constructor(props) {
            super(props);
            this.componentRef = React.createRef();
        }
        static get displayName() {
            return displayName;
        }
        componentDidMount() {
            this.componentWillReceiveProps(this.props);
        }
        componentWillReceiveProps(props) {
            const node = ReactDOM.findDOMNode(this);
            attachEventProps(node, props);
        }
        render() {
            const _a = this.props, { children, forwardedRef } = _a, cProps = __rest(_a, ["children", "forwardedRef"]);
            return React.createElement(tagName, Object.assign({}, cProps, { ref: forwardedRef }), children);
        }
    }
    function forwardRef(props, ref) {
        return React.createElement(ReactComponent, Object.assign({}, props, { forwardedRef: ref }));
    }
    forwardRef.displayName = displayName;
    return React.forwardRef(forwardRef);
}
//# sourceMappingURL=createComponent.js.map