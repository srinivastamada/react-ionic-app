import React, { Component } from 'react';
import { IonTabBarInner, IonTabButton } from '../index';
import { withRouter } from 'react-router';
class IonTabBar extends Component {
    constructor(props) {
        super(props);
        this.onTabButtonClick = (e) => {
            const targetUrl = (this.state.activeTab === e.detail.tab) ?
                this.state.tabs[e.detail.tab].originalHref :
                this.state.tabs[e.detail.tab].currentHref;
            this.props.history.push(targetUrl);
        };
        this.renderChild = (activeTab) => (child) => {
            const href = (child.props.tab === activeTab) ? this.props.location.pathname : (this.state.tabs[child.props.tab].currentHref);
            return React.cloneElement(child, {
                href,
                onIonTabButtonClick: this.onTabButtonClick
            });
        };
        const tabActiveUrls = {};
        React.Children.forEach(this.props.children, (child) => {
            if (typeof child === 'object' && child.type === IonTabButton) {
                tabActiveUrls[child.props.tab] = {
                    originalHref: child.props.href,
                    currentHref: child.props.href
                };
            }
        });
        this.state = {
            activeTab: null,
            tabs: tabActiveUrls
        };
    }
    static getDerivedStateFromProps(props, state) {
        const activeTab = Object.keys(state.tabs)
            .find(key => {
            const href = state.tabs[key].originalHref;
            return props.location.pathname.startsWith(href);
        });
        if (!activeTab || (activeTab === state.activeTab && state.tabs[activeTab].currentHref === props.location.pathname)) {
            return null;
        }
        return {
            activeTab,
            tabs: Object.assign({}, state.tabs, { [activeTab]: {
                    originalHref: state.tabs[activeTab].originalHref,
                    currentHref: props.location.pathname
                } })
        };
    }
    render() {
        return (React.createElement(IonTabBarInner, Object.assign({}, this.props, { selectedTab: this.state.activeTab }), React.Children.map(this.props.children, this.renderChild(this.state.activeTab))));
    }
}
export default withRouter(IonTabBar);
//# sourceMappingURL=IonTabBar.js.map